{"version":3,"sources":["component/ContactForm/ContactForm.module.css","component/ContactList/ContactList.module.css","component/ContactElement/ContactElement.module.css","component/Container/Container.module.css","component/redux/contacts/add-actions.js","component/redux/contacts/contact-reduser.js","component/redux/store.js","component/Container/Container.js","component/redux/contacts/contactsOperations.js","component/redux/contacts/selector.js","component/ContactElement/ContactElement.js","component/ContactList/ContactList .js","component/ContactForm/ContactForm.js","component/Filter/Filter.js","component/App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","contacts","createReducer","_","payload","state","filter","id","isLoading","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactReduser","devTools","process","Container","children","className","с","container","axios","defaults","baseURL","getContacts","getFilter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","ContactsEl","number","onDeleteContact","ce","box","btn","type","onClick","size","Contacts","useSelector","dispatch","useDispatch","delete","then","catch","contactsOperations","c","list","map","item","ContactForm","useState","setName","setNumber","hendleChange","e","currentTarget","value","reset","p","onSubmit","preventDefault","some","contact","repeatContacts","repeatNumber","post","data","alert","wrapp","onChange","pattern","title","required","Filter","actions","target","App","useEffect","get","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7736267c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"ContactForm_box__2HCpj\",\"wrapp\":\"ContactForm_wrapp__2fjtf\",\"btn\":\"ContactForm_btn__2iKid\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3mjBn\",\"item\":\"ContactList_item__3ptXt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"ContactElement_box__fL9EE\",\"btn\":\"ContactElement_btn__1RW6Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3pdQ4\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './add-actions';\r\n\r\nconst contacts = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\nconst isLoading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\nconst error = createReducer(null, {\r\n  [fetchContactsError]: (_, { payload }) => payload,\r\n  [fetchContactsRequest]: () => null,\r\n  [addContactError]: (_, { payload }) => payload,\r\n  [addContactRequest]: () => null,\r\n  [deleteContactError]: (_, { payload }) => payload,\r\n  [deleteContactRequest]: () => null,\r\n});\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  isLoading,\r\n  error,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport logger from 'redux-logger';\r\nimport { FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\nimport contactReduser from './contacts/contact-reduser';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactReduser,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import PropTypes from 'prop-types';\r\nimport с from './Container.module.css';\r\n\r\nexport default function Container({ children }) {\r\n  return <div className={с.container}>{children}</div>;\r\n}\r\nContainer.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './add-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:1111';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = { name, number };\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.contacts;\r\nexport const getLoading = state => state.contacts.isLoading;\r\nexport const getError = state => state.contacts.error;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\r\n});\r\n","import PropTypes from 'prop-types';\r\nimport ce from './ContactElement.module.css';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\n\r\nconst ContactsEl = ({ name, number, id, onDeleteContact }) => (\r\n  <div className={ce.box}>\r\n    <p>{name}</p>\r\n    <p>: {number}</p>\r\n    <button className={ce.btn} type=\"button\" onClick={() => onDeleteContact(id)}>\r\n      <FaTrashAlt size=\"20px\" />\r\n    </button>\r\n  </div>\r\n);\r\nContactsEl.propTypes = {\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\nexport default ContactsEl;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as contactsOperations from '../redux/contacts/contactsOperations';\r\nimport { getVisibleContacts } from '../redux/contacts/selector';\r\nimport c from './ContactList.module.css';\r\nimport ContactsEl from '../ContactElement/ContactElement';\r\n\r\nconst Contacts = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const onDeleteContact = id => dispatch(contactsOperations.deleteContact(id));\r\n  return (\r\n    <ul className={c.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={c.item}>\r\n          <ContactsEl name={name} number={number} onDeleteContact={() => onDeleteContact(id)} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as contactsOperations from '../redux/contacts/contactsOperations';\r\nimport p from './ContactForm.module.css';\r\nimport { getContacts } from '../redux/contacts/selector';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const hendleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n  const repeatContacts = name => {\r\n    return contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\r\n  };\r\n  const repeatNumber = number => {\r\n    return contacts.some(contact => contact.number === number);\r\n  };\r\n  const hendleSubmit = e => {\r\n    e.preventDefault();\r\n    reset();\r\n\r\n    if (repeatContacts(name)) {\r\n      alert(`${name} is already in contacts`);\r\n    } else if (repeatNumber(number)) {\r\n      alert(`${number} is already in contacts`);\r\n    } else {\r\n      dispatch(contactsOperations.addContact(name, number));\r\n    }\r\n  };\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={p.box} onSubmit={hendleSubmit}>\r\n      <label className={p.wrapp}>\r\n        <p>Name</p>\r\n        <input\r\n          value={name}\r\n          onChange={hendleChange}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label className={p.wrapp}>\r\n        <p>Number</p>\r\n        <input\r\n          value={number}\r\n          onChange={hendleChange}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n      <button className={p.btn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\n// import React, { useState } from 'react';\r\n// import p from './ContactForm.module.css';\r\n\r\n// export default function ContactForm({ onSubmit }) {\r\n//   const [name, setName] = useState('');\r\n//   const [number, setNumber] = useState('');\r\n\r\n//   const hendleChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n\r\n//     switch (name) {\r\n//       case 'name':\r\n//         setName(value);\r\n//         break;\r\n\r\n//       case 'number':\r\n//         setNumber(value);\r\n//         break;\r\n\r\n//       default:\r\n//         return;\r\n//     }\r\n//   };\r\n//   const hendleSubmit = e => {\r\n//     e.preventDefault();\r\n//     onSubmit({ name, number });\r\n//     reset();\r\n//   };\r\n//   const reset = () => {\r\n//     setName('');\r\n//     setNumber('');\r\n//   };\r\n\r\n//   return (\r\n//     <form className={p.box} onSubmit={hendleSubmit}>\r\n//       <label className={p.wrapp}>\r\n//         <p>Name</p>\r\n//         <input\r\n//           value={name}\r\n//           onChange={hendleChange}\r\n//           type=\"text\"\r\n//           name=\"name\"\r\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//           required\r\n//         />\r\n//       </label>\r\n//       <label className={p.wrapp}>\r\n//         <p>Number</p>\r\n//         <input\r\n//           value={number}\r\n//           onChange={hendleChange}\r\n//           type=\"tel\"\r\n//           name=\"number\"\r\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//           required\r\n//         />\r\n//       </label>\r\n//       <br />\r\n//       <button className={p.btn} type=\"submit\">\r\n//         Add contact\r\n//       </button>\r\n//     </form>\r\n//   );\r\n// }\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../redux/contacts/add-actions';\r\nimport { getFilter } from '../redux/contacts/selector';\r\nimport React from 'react';\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilter);\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => dispatch(actions.changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Container from './Container/Container';\r\nimport ContactList from './ContactList/ContactList ';\r\nimport ContactForm from './ContactForm/ContactForm';\r\nimport Filter from './Filter/Filter';\r\nimport * as contactsOperations from './redux/contacts/contactsOperations';\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()));\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </Container>\r\n  );\r\n}\r\n\r\n// import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n// // import { useEffect } from 'react';\r\n// // import { useDispatch } from 'react-redux';\r\n// import Container from './Container/Container';\r\n// import ContactList from './ContactList/ContactList ';\r\n// import ContactForm from './ContactForm/ContactForm';\r\n// import Filter from './Filter/Filter';\r\n// import * as contactsOperations from './redux/contacts/contactsOperations';\r\n\r\n// class App extends Component {\r\n//   // const dispatch = useDispatch();\r\n//   // useEffect(() => dispatch(contactsOperations.fetchContacts()));\r\n//   componentDidMount() {\r\n//     this.props.fetchContacts();\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <h1>Phonebook</h1>\r\n//         <ContactForm />\r\n//         <h2>Contacts</h2>\r\n//         <Filter />\r\n//         <ContactList />\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n// const mapDispatchToProps = dispatch => ({\r\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { store } from './component/redux/store';\r\nimport App from './component/App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}